openapi: "3.0.3"
info:
  title: ProductsAPI for Testing
  version: "1.0"
  contact:
    name: Florian Kraft
    url: http://floriank.engineer
    email: none@gmail.com
  license:
    name: MIT
  description: 'A simple products API'
servers:
  - url: https://products.production.info
    description: Production system, get your Swag here!
  - url: https://products.staging.info
    description: Staging system without billing integration
paths:
  '/products':
    get:
      summary: GET all products
      operationId: get-products
      description: Gets all products in the collection
      tags:
        - product
        - collection
      responses:
        default:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Product'
              examples:
                products-example:
                  $ref: '#/components/examples/my-cool-products'
                inline-example:
                  summary: A list of products
                  value:
                    - productId: barfoo
                      name: A barfoo product!
                      dimensions:
                        height: 42
                        width: 10
                        depth: 99
                    - productId: foobar
                      name: A foobar product!
                      dimensions:
                        height: 23
                        width: 8
                        depth: 12
  '/products/{productId}':
    get:
      summary: GET product
      tags:
        - product
      responses:
        default:
          description: Displaying a product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                foobar:
                  $ref: '#/components/examples/my-cool-product'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      operationId: get-product
      description: Returns a product
    parameters: []
components:
  schemas:
    Product:
      title: A product
      description: Represents a single, really cool product
      type: object
      required:
        - productId
        - dimension
      properties:
        productId:
          type: string
        dimension:
          type: object
          required:
            - height
            - width
            - depth
          properties:
            width:
              type: number
            height: 
              type: number
            depth:
              type: number

      x-examples:
        - productId: foobar
          dimension:
            height: 42
            width: 12
            depth: 90

    NotFoundError:
      title: An error when something cannot be found
      description: Represents a NotFound error
      type: object
      properties:
        message:
          type: string
        error_code:
          type: number
      required:
        - message
        - error_code
      x-examples:
        - message: Not found!
          error_code: 131

  examples:
    my-cool-product:
      summary: A really cool product
      value:
        productId: foobar
        name: CoolProduct
        dimension:
          height: 23
          width: 8
          depth: 12
    my-cool-products:
      summary: A set of really cool products
      value:
        - productId: foobar
          name: CoolProduct
          dimension:
            height: 23
            width: 8
            depth: 12
        - productId: foobaz
          name: CoolProduct 2
          dimension:
            height: 23
            width: 8
            depth: 12
